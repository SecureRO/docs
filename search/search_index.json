{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Android documentation</p> <p>iOS documentation</p>"},{"location":"android/","title":"Android","text":""},{"location":"android/#general-usage-as-aar-file","title":"General usage as <code>.aar</code> file","text":""},{"location":"android/#including-the-dependency","title":"Including the dependency","text":"<p>Include the following dependencies in your application <code>build.gradle</code> file</p> <pre><code>dependencies {\n// ... your dependencies\n\n// Collector dependencies\nimplementation 'com.google.code.gson:gson:2.10.1'  \nimplementation 'com.google.android.gms:play-services-location:21.0.1'  \nimplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'  \nimplementation 'com.squareup.okhttp3:okhttp:4.11.0'  \nimplementation 'com.squareup.moshi:moshi-kotlin:1.14.0'  \nimplementation 'com.google.android.gms:play-services-safetynet:18.0.1'  \nimplementation 'com.google.guava:guava:31.0.1-jre'  \n\n// Optional Huawei location dependency\nimplementation 'com.huawei.hms:location:6.12.0.300'  \n\n// Optional Play Integrity dependency\nimplementation 'com.google.android.play:integrity:1.4.0'\n\n// Collector dependency\nimplementation files('libs/collector-release.aar')\n}\n</code></pre> <p>The collector uses, but doesn't require the following permissions in the <code>AndroidManifest.xml</code>. Please make sure to include the ones you think are appropriate for your application Collector manifest permissions and usage</p>"},{"location":"android/#usage-in-code","title":"Usage in code","text":"<pre><code>class MyApp: Application() {\n    private val BASE_URL = \"base url provided by us\"\n    private val CID = \"customer id provided by us\"\n\n    fun onCreate() {\n        // It is preferred that the collector SDK is initialized from the Application class, but it can be initialized from any place before the SDK is used\n        val collector = CollectorAgent.initialize(this, BASE_URL, CID)\n\n        // mainly used to print the logs into logcat for debugging\n        collector.isDebug = false\n    }\n}\n</code></pre> <pre><code>val collector = CollectorAgent.get()\n\n// call when the user session id is updated or available\ncollector.setCSID(CSID)\n\n// call when the user id is updated or available\ncollector.setUserID(UserID)\n\n// call when the state of the application is changed. Different contexts can trigger different state updates inside the SDK\ncollector.sendContext(\"CONTEXT\")\n</code></pre>"},{"location":"android/#play-integrity-integration","title":"Play Integrity Integration","text":"<p>The SDK is using the play integrity to utilize built in android security features. To use those features you have to configure the Play Integrity on the platform, which would include sharing the cloud project number and creating.</p> <p>To retrieve that info you have to go to your firebase console and open the project settings. https://console.firebase.google.com/ The project number will be under the <code>General</code> tab </p> <p>We also need a service account private key to make requests to google on your behalf for retrieving additional information regarding suspicious activity on the device. You can generate the private key from firebase.</p> <p></p> <p>Then you'll have to enable Play Integrity from the google console https://console.cloud.google.com/marketplace/product/google/playintegrity.googleapis.com for your selected project.</p>"},{"location":"android_changelog/","title":"Android Changelog","text":""},{"location":"android_changelog/#a12082024","title":"a12082024","text":"<ul> <li>Using Play Integrity instead of Safetynet</li> <li>Makes every permission optional, meaning the client has to include every permission explicitly into their own manifest as per documentation </li> <li>Implements overlay detection feature</li> <li>Safety and stability improvements</li> </ul>"},{"location":"android_changelog/#a02082024","title":"a02082024","text":"<ul> <li>Improves configuration caching</li> <li>Improves log sending based on log ids</li> </ul>"},{"location":"android_changelog/#a090720241","title":"a09072024.1","text":"<ul> <li>Collects battery info</li> <li>Collects uptime</li> </ul>"},{"location":"android_changelog/#a09072024","title":"a09072024","text":"<ul> <li>Improves reliability of the network layer</li> <li>Exposes some configuration values to ensure touch and input are collected only when requested</li> </ul>"},{"location":"android_changelog/#a03072024","title":"a03072024","text":"<ul> <li>Exposes the ability to provide input and touch events</li> </ul>"},{"location":"android_changelog/#a21062024","title":"a21062024","text":"<ul> <li>Refactors response json parsing</li> <li>Fixes networking issue with missing connection</li> </ul>"},{"location":"android_changelog/#a20062024","title":"a20062024","text":"<ul> <li>Refactoring storage</li> <li>Adding storage configuration</li> <li>Temporarily enables all logs on SDK level</li> </ul>"},{"location":"android_changelog/#a19062024","title":"a19062024","text":"<ul> <li>Includes some events from the previous session that were not submitted</li> </ul>"},{"location":"android_changelog/#a18062024","title":"a18062024","text":"<ul> <li>Adds network type collection</li> <li>Improves location collection and logs</li> </ul>"},{"location":"android_changelog/#a14062024","title":"a14062024","text":"<ul> <li>Fixes event spam</li> </ul>"},{"location":"android_changelog/#a12062024","title":"a12062024","text":"<ul> <li>General stabilization release</li> <li>More tests</li> </ul>"},{"location":"android_changelog/#a07062024","title":"a07062024","text":"<ul> <li>Includes huawei location sdk alongside google location sdk</li> </ul>"},{"location":"android_changelog/#a06062024","title":"a06062024","text":"<ul> <li>Collecting display info</li> <li>Improving event caching</li> </ul>"},{"location":"android_changelog/#a05062024","title":"a05062024","text":"<ul> <li>Downgrading kotlin version</li> <li>Updating logger with configs</li> <li>Implements new muid logic</li> </ul>"},{"location":"android_changelog/#a04062024","title":"a04062024","text":"<ul> <li>Refactors multiple event reason handling</li> </ul>"},{"location":"android_changelog/#a30052024","title":"a30052024","text":"<ul> <li>Improves storage cleaning</li> </ul>"},{"location":"capacitor/","title":"Capacitor plugin","text":"<p>This is a mobile sdk for fraud detection that is compatible with the Capacitor cross-platform mobile framework.</p>"},{"location":"capacitor/#installation","title":"Installation","text":"<p>First you should copy the plugin directory into a place inside your project where it always accessible.</p> <p>Then you should be installing all the plugin dependencies inside the plugin and building it:</p> <pre><code>cd capacitor-collector-plugin\nnpm install  \nnpm run build\n</code></pre> <p>Then, the installation of the plugin is as simple as just running.</p> <pre><code>npm install ../capacitor-collector-plugin\nnpx cap sync\n</code></pre>"},{"location":"capacitor/#example","title":"Example","text":"<p>There is an example application inside the plugin directory called <code>example</code>. After installing the dependencies of the plugin and buildilng it, I recommend playing around with the example by doing so:</p> <pre><code>cd capacitor-collector-plugin\nnpm install\nnpx cap sync\nnpm run build\n</code></pre> <p>After that you can open the example app and run on different mobile platforms.</p> <pre><code># Android\nnpx cap open android # Will open the example project in Android Studio where you can build and run it\n</code></pre> <pre><code># iOS\nnpx cap open ios # Will open the example project in XCode where you can build and run it\n</code></pre>"},{"location":"capacitor/#usage","title":"Usage","text":"<p>You can use the SDK comfortably from your JavaScript code.</p> <p>This is the recommended way of starting/initializing the SDK.</p> <pre><code>import 'capacitor-collector-plugin'\n\nfunction yourInitializationFunction() {\n    // These values are provided by us\n    let baseUrl = \"&lt;BASE_URL&gt;\"\n    let cid = \"&lt;CID&gt;\"\n\n    // It is important to call `start` after the initization is complete\n    CapacitorCollectorPlugin.initialize({\n        baseUrl: baseUrl,\n        cid: cid\n    }).then(() =&gt; {\n        CapacitorCollectorPlugin.start()\n    })\n}\n</code></pre> <p>It is important to set update values when the app receives them</p> <pre><code>/**\n * @param userId - usually the id the user uses to login\n * @param csid - the customer session id that is assigned to the current user session (login)\n */\nfunction updateUserInfo(opts: {userId: string, csid: string}) {\n    CapacitorCollectorPlugin.setUserId({userId: opts.userId})\n    CapacitorCollectorPlugin.setCsid({csid: opts.csid})\n    CapacitorCollectorPlugin.sendContext({context: \"UPDATING_USER\"})\n}\n</code></pre>"},{"location":"ios/","title":"iOS","text":""},{"location":"ios/#adding-dependencies-using-swift-package-manager","title":"Adding dependencies using swift package manager","text":"<p>You'll recieve zip file containing the Swift Package. Complete the following steps to import the framework into your Xcode project:</p> <ul> <li>Download the .zip which contains Collector Framework</li> <li>Unzip the contents of the zip file</li> <li>Move \"Collector\" folder inside your project. </li> </ul> <p></p> <p>Next steps: - Open your project in XCode - Select Project, Open Project Settings, Switch to Package Dependencies &amp; Click add (+) </p> <p></p> <ul> <li>Click \"Add Local\" (Image below).</li> <li>Select the package that you just moved to your project (Image below).</li> <li>Now, Select all packages &amp; select Target in which you wish to add those packages</li> <li>After import you should see the \"collector\" in the project structure. </li> </ul> <p></p>"},{"location":"ios/#linking-and-embedding-the-sdk-framework","title":"Linking and Embedding the SDK Framework","text":"<p>Ensure that the dependency is available to your application, Open Project settings, select target, switch to General Tab &amp; make sure that dependency is added.</p>"},{"location":"ios/#application-code","title":"Application code","text":"<p>The general collector allows for using the camera along with some sensor collecting.</p> <p>You can start listening and collecting sensor events like this:</p> <pre><code>Collector.shared.initialize(cid: cid, baseUrl: baseUrl, csid: csid, userID: username)\nCollector.shared.startListeningToEvents()\nCollector.shared.collect()\n</code></pre> <p><code>cid</code> = Customer Specific Identifier. This identifier will be provided by IronVest baseUrl = This baseUrl will be provided by IronVest</p> <p><code>csid</code> = Customer Session Identifier. Usually it's a unique session identifier for each user session. This is the identifier by which the session can be queried during validation or looked for in the dashboard</p> <p><code>userID</code> = Unique User Identifier.</p>"},{"location":"ios/#troubleshooting","title":"Troubleshooting","text":"<p>The SDK generates logs throughout its execution. The most recent logs are stored in memory and can be retrieved for problems troubleshooting. Below is an example of how these logs can be put in a variable or in the Pasteboard to be shared with someone else.</p> <pre><code>// Example 1: Collecting Logs in a variable\nvar sdkLogs = Collector.shared.getLogs()\n</code></pre> <pre><code>// Example 2: Collecting logs into Pasteboard &amp; App-User can paste it anywhere (whatsapp, mail, telegram etc)\nUIPasteboard.general.string = Collector.shared.getLogs()\n</code></pre>"},{"location":"ios_changelog/","title":"iOS Changelog","text":""},{"location":"ios_changelog/#i08072024","title":"i08072024","text":"<ul> <li>Captures whether the screen is being captured or shared</li> <li>Fixes network url slashes</li> </ul>"},{"location":"ios_changelog/#i03072024","title":"i03072024","text":"<ul> <li>Reworks the general way events are collected and reported</li> <li>Makes the <code>muid</code> be the first session to arrive</li> <li>Makes <code>smuid</code> the device identifier with the generation date at the beginnning</li> </ul>"},{"location":"ios_changelog/#i23052024","title":"i23052024","text":"<ul> <li>Fixes events storage</li> <li>Fixes bom sending with the correct csid</li> </ul>"},{"location":"ios_changelog/#i220520242","title":"i22052024.2","text":"<ul> <li>Exposing sdk version to the consumer</li> </ul>"},{"location":"ios_changelog/#i220520241","title":"i22052024.1","text":"<ul> <li>Changes value ordering of touch event storage/reporting</li> <li>Collecting additional device info controlled by configs</li> </ul>"},{"location":"ios_changelog/#i22052024","title":"i22052024","text":"<ul> <li>Implements better motion, orientation collection</li> </ul>"},{"location":"ios_changelog/#i21052024","title":"i21052024","text":"<ul> <li>Fixes location permission flag in the permission collector</li> </ul>"},{"location":"ios_changelog/#i170520241","title":"i17052024.1","text":"<ul> <li>Respects config on whether to explicitly ask for location when collecting data</li> </ul>"},{"location":"ios_changelog/#i17052024","title":"i17052024","text":"<ul> <li>Additional logging and checks for sending context events</li> <li>Reads ca51 config for making sure the right time and repetitions are used for camera image capture</li> </ul>"},{"location":"ios_changelog/#16052024","title":"16052024","text":"<ul> <li>Adding support for configuration csinc2</li> <li>Implements remote log reporting when enabled via configuration</li> </ul>"},{"location":"ios_changelog/#05052024","title":"05052024","text":"<ul> <li>Changes to configuration variable names</li> <li>Improvements to the timer creation/update logic</li> <li>Sending <code>csid</code> with the captured image for face recognition improvements</li> </ul>"},{"location":"manifest/","title":"Android manifest permissions and usage","text":"<pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n</code></pre> <p>The SDK is making network requests</p> <pre><code>&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n</code></pre> <p>The SDK is collecting information about currently connected networks</p> <pre><code>&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;\n</code></pre> <p>The SDK is collecting information about current connected networks including wifi information</p> <pre><code>&lt;uses-permission  \n    android:name=\"android.permission.ACCESS_COARSE_LOCATION\"  \n    tools:node=\"remove\" /&gt;  \n&lt;uses-permission  \n    android:name=\"android.permission.ACCESS_FINE_LOCATION\"  \n    tools:node=\"remove\" /&gt;\n</code></pre> <p>The SDK is collecting device location information. It is not forced on the client and will not be merged into the consumer <code>AndroidManifest.xml</code> </p> <pre><code>&lt;uses-permission  \n    android:name=\"android.permission.BLUETOOTH_CONNECT\"  \n    tools:node=\"remove\" /&gt;  \n&lt;uses-permission  \n    android:name=\"android.permission.BLUETOOTH\"  \n    android:maxSdkVersion=\"30\"  \n    tools:node=\"remove\" /&gt;  \n&lt;uses-permission  \n    android:name=\"android.permission.BLUETOOTH_ADMIN\"  \n    android:maxSdkVersion=\"30\"  \n    tools:node=\"remove\" /&gt;\n</code></pre> <p>The SDK collects bluetooth status and devices information. It is not forced on the client and will not be merged into the consumer <code>AndroidManifest.xml</code></p> <pre><code>&lt;uses-permission  \n    android:name=\"android.permission.QUERY_ALL_PACKAGES\"  \n    tools:ignore=\"QueryAllPackagesPermission\"  \n    tools:node=\"remove\" /&gt;\n</code></pre> <p>The SDK collects installed applications looking for malware or anything suspicious that can be used to trick the bank customer to share sensitive information. It is not forced on the client and will not be merged into the consumer <code>AndroidManifest.xml</code></p> <pre><code>&lt;uses-permission android:name=\"android.permission.READ_PHONE_NUMBERS\"  \n    tools:node=\"remove\"/&gt;  \n&lt;uses-permission android:name=\"android.permission.READ_SMS\"  \n    tools:node=\"remove\"/&gt;  \n&lt;uses-permission android:name=\"android.permission.READ_PRIVILEGED_PHONE_STATE\"  \n    tools:ignore=\"ProtectedPermissions\"  \n    tools:node=\"remove\"/&gt;\n</code></pre> <p>The SDK tries to read carrier and phone information, including signal levels, battery levels, amount of sim cards etc. It is not forced on the client and will not be merged into the consumer <code>AndroidManifest.xml</code></p> <pre><code>&lt;uses-permission android:name=\"android.permission.HIDE_OVERLAY_WINDOWS\"  \n    tools:node=\"remove\"/&gt;\n</code></pre> <p>The SDK allows to control when overlays are allowed to be displayed over the application. This permission is required to be able to control that. It is not forced on the client and will not be merged into consumer <code>AndroidManifest.xml</code></p>"}]}